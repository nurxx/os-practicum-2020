
  a) wuhan.sh
1. awk -F, '$2 == "Wuhan" {print $1}' city.csv 
  i.      -F,  - разграничаваме колоните със сепаратор ","
  ii.     $2 == "Wuhan" - условие към awk, с което търсим града във файла city.csv с английско име "Wuhan"
  iii.    {print $1} - комбинирани с горното условие връща Wuhan на китайски
2. grep -w "$(awk -F, '$2 == "Wuhan" {print $1}' city.csv)" spread.csv
  i.      grep -iw - търсим exact&case-insensite match за Wuhan(изписан на китайски)
  ii.     търсим изходът от 1. в spread.csv с използвайки subshell $()
3. awk -F, '{print $NF}' <(grep -iw "$(awk -F, '$2 == "Wuhan" {print $1}' city.csv)" spread.csv) 
  i.      awk -F, '{print $NF}' - взимаме последната колона(броят смъртни случаи) от записът който сме намерили в 2. за града Wuhan
  ii.     <(grep -w "$(awk -F, '$2 == "Wuhan" {print $1}' city.csv)" spread.csv) - използваме process substitution / третираме като файл (awk командата очаква файл)

-----------------------------------------------------------------------------
 
  b) top_cities.sh
1.  awk -F, '$3 > 100 { print $1": "int(($4/$3)*1000) }' spread.csv
    i.  взимаме записите с поне 101( $3 > 100 ) регистрирани случая и принтим <име на град>: <ниво на смъртност> в spread.csv
    ii. int(($4/$3)*1000) - закръгляме целочислено надолу нивото на смъртност
2.  sort -t: -rnk2
    i.  сортираме резултата от 1. по втора колона (разграничаваме колони по -t:), по ниво на смъртност (-k2), низходящо (-r), целочислено (-n)
3.  head 
    i.  първите 10 записа от 2.

-----------------------------------------------------------------------------

  c) top_provinces.sh
1.  cut -d, -f1 province.csv
    i.  уникален лист на провинциите(на китайски)
2.  xargs -I {} bash -c "grep -iw {} <(join -t, -j 1 <(sort -t, -k1 spread.csv) <(sort -t, -k1 city_province.csv)) | awk -F, '{r+=\$3;d+=\$4} END {print \$NF\": \"int((d/r)*1000)}' "
    i.   за всяка една провинция от 1. търсим провинцията в изхода на <(join -t, -j 1 <(sort -t, -k1 spread.csv) <(sort -t, -k1 city_province.csv))
    ii.  join -t, -j 1 <(sort -t, -k1 spread.csv) <(sort -t, -k1 city_province.csv)
        - комбинираме записите от spread.csv и city_province.csv по име на град и сепаратор "," (join -t, -j 1)
        - сортираме 2та файла предварително, за да можем да ги join-нем
        - използваме process substitution за изхода от сортировките на файловете за да можем да ги третираме като файлове, join командата очаква файлове
        - получаваме записите за градовете във всяка провинция в следния формат: 
            <име_на_град>,<брой_заподозрени_случаи>,<брой_регистрирани_случаи>,<брой_смъртни_случаи>,<име_на_провинция>
    iii. awk -F, '{r+=\$3;d+=\$4} END {print \$NF\": \"int((d/r)*1000)}'
        - сумираме всички регистрирани случаи от записите за градовете намерени в дадената провинция (r)
        - сумираме всички смъртни случаи от записите за градовете намерени в дадената провинция (p)
        - принтим името на провинцията(последната колона) от изхода на ii. с двоеточие и нивото на смъртност, пресметнато за дадената провинция
3.  sort -t: -rnk2
    i.   сортираме резултата от 2. по втора колона (разграничаваме колони по -t:), по ниво на смъртност (-k2), низходящо (-r), целочислено (-n)
4.  head
    i.  първите 10 записа от 3.

-----------------------------------------------------------------------------

    d) top_cities_en.sh
1. join -t, -j 1 <(sort -t, -k1 city.csv) <(sort -t, -k1 spread.csv)
    i.  сортираме двата файла city.csv и spread.csv по общ прознак (име на град)
    ii. комбинираме сортираните файлове по име на град (-j 1), получаваме:
        <име на град>,<име на град на англисйки>,<заподоздрени случаи>,<регистрирани случаи>,<смъртни случаи>
2. awk -F, '$4 > 100 {print $1" ("$2"): "int(($5/$4)*1000)}'
    i. $4 > 100 - от изхода на 1. филтрираме редовете с поне 101 регистрирани случаи
    ii. принтим в указания формат в условието 
3.   sort -t: -rnk2
    i.   сортираме резултата от 2. по втора колона (разграничаваме колони по -t:), по ниво на смъртност (-k2), низходящо (-r), целочислено (-n)
4.  head
    i.  първите 10 записа от 3.

-----------------------------------------------------------------------------

    d) top_provinces_en.sh
1.  cut -d, -f1 province.csv
    i.  уникален лист на провинциите(на китайски)
2.  xargs -I {} bash -c "grep -iw {} <(join -t, -1 1 -2 3 <(sort -t, -k1 spread.csv) <(sort -t, -k3 <(join -t, -1 1 -2 2 <(sort -t, -k1 province.csv) <(sort -t, -k2 city_province.csv)))) | awk -F, '{r+=\$3;d+=\$4} END {print \$NF\": \"int((d/r)*1000)}' "
    i.   за всяка една провинция от 1. търсим провинцията в изхода на <(join -t, -1 1 -2 3 <(sort -t, -k1 spread.csv) <(sort -t, -k3 <(join -t, -1 1 -2 2 <(sort -t, -k1 province.csv) <(sort -t, -k2 city_province.csv))))
    ii.  join -t, -1 1 -2 3 <(sort -t, -k1 spread.csv) <(sort -t, -k3 <(join -t, -1 1 -2 2 <(sort -t, -k1 province.csv) <(sort -t, -k2 city_province.csv))))
        - комбинираме записите от province.csv и city_province.csv по име на провинция и сепаратор "," (join -t, -1 1 -2 2)
        - сортираме 2та файла предварително, за да можем да ги join-нем <(sort -t, -k1 province.csv) <(sort -t, -k2 city_province.csv)
        - използваме process substitution за изхода от сортировките на файловете за да можем да ги третираме като файлове, join командата очаква файлове
        - сортираме изхода досега по име на град(sort -t, -k3) 
        - комбинираме резултата със spread.csv по име на град
        - получаваме записите за градовете във всяка провинция в следния формат: 
            <име_на_град>,<брой_заподозрени_случаи>,<брой_регистрирани_случаи>,<брой_смъртни_случаи>,<име_на_провинция>,<име_на_провинция_на_английски>
    iii. awk -F, '{r+=\$3;d+=\$4} END {print \$5\" (\"\$NF\"): \"int((d/r)*1000)}'
        - сумираме всички регистрирани случаи от записите за градовете намерени в дадената провинция (r)
        - сумираме всички смъртни случаи от записите за градовете намерени в дадената провинция (p)
        - принтим името на провинцията(последната колона) от изхода на ii. с двоеточие и нивото на смъртност, пресметнато за дадената провинция
3.  sort -t: -rnk2
    i.   сортираме резултата от 2. по втора колона (разграничаваме колони по -t:), по ниво на смъртност (-k2), низходящо (-r), целочислено (-n)
4.  head
    i.  първите 10 записа от 3.
